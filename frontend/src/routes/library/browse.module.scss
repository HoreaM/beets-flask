
$column_gap: 0.5rem;

.columnBrowser {
    display: flex;
    height: 100%;
    column-gap: $column_gap;
    padding-bottom: 0;
}

.column {
    margin: 0;
    gap: 0;
    padding: 0;
    overflow: hidden;

    // on mobile only one column
    width: 100%;
    display: flex;
    flex-direction: column;
    &.isSecondary {
        display: none;
    }
    // on large screens multiple columns
    @media (min-width: 768px) {
        // 4 columns, 3 gaps => x0.75
        width: calc(25% - 0.75*$column_gap);
        &.isSecondary {
            display: flex;
            width: calc(25% - 0.75*$column_gap)
        }
    }
}

.columnLabel {
    text-align: center;
    // font-weight: bold;
    text-transform: uppercase;
    padding-top: 0.5rem;
    position: relative;
    opacity: 0.6;
    display: none;
    @media (min-width: 768px) {
        display: block;
    }
    &::after {
        // divider line with full opactiy
        content: "";
        width: 100%;
        display: block;
        height: 0.5rem; // this is effectively padding bottom
        position: aboslute;
        border-bottom: #292e31 solid 1px;
    }
}

.browserHeader {
    border-bottom: #292e31 solid 1px;
    padding: 0.5rem 0.5rem;
    @media (min-width: 768px) {
        &:not(.alwaysShow) {
            display: none;
        }
    }
}

.listBox {
    width: 100%;
    // we have to set the height explicitly for the list that loads dynamic.
    // 110px ~= column label + navbar header. not working for browser header (on mobile)
    height: 100%;

    position: relative;
    display: flex;
    align-items: start;

    // mui adds uls
    & > ul {
        padding: 0;
        width: 100%;
    }
}

.listItem {
    --default-bg: var(--mui-palette-background-paper);
    --hover-bg: #353a3f;
    --selected-bg: #292e31;
    padding: 0rem 0.5rem;
    width: 100%;
    &[data-selected="true"] {
        background-color: var(--selected-bg);
    }
    &:hover {
        background-color: var(--hover-bg);
    }
    &::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        width: 15px;
        pointer-events: none;
        background: linear-gradient(to right, transparent, var(--current-bg));
    }
}
// Dynamically set the --current-bg variable based on state
.listItem {
    &[data-selected="true"]::after {
        --current-bg: var(--selected-bg);
    }
    &:hover::after {
        --current-bg: var(--hover-bg);
    }
    &:not(:hover):not([data-selected="true"])::after {
        --current-bg: var(--default-bg);
    }
}

.trackViewBox {
    display: flex;
    flex-direction: column;
}
